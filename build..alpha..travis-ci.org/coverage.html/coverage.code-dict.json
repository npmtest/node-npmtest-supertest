{"/home/travis/build/npmtest/node-npmtest-supertest/test.js":"/* istanbul instrument in package npmtest_supertest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-supertest/lib.npmtest_supertest.js":"/* istanbul instrument in package npmtest_supertest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_supertest = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_supertest = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-supertest/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-supertest && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_supertest */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_supertest\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_supertest.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_supertest.rollup.js'] =\n            local.assetsDict['/assets.npmtest_supertest.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_supertest.__dirname + '/lib.npmtest_supertest.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-supertest/node_modules/supertest/index.js":"\n/**\n * Module dependencies.\n */\n\nvar methods = require('methods')\n  , Test = require('./lib/test')\n  , http = require('http');\n\n/**\n * Test against the given `app`,\n * returning a new `Test`.\n *\n * @param {Function|Server} app\n * @return {Test}\n * @api public\n */\n\nmodule.exports = function(app){\n  if ('function' == typeof app) app = http.createServer(app);\n  var obj = {};\n\n  methods.forEach(function(method){\n    obj[method] = function(url){\n      return new Test(app, method, url);\n    };\n  });\n\n  // Support previous use of del\n  obj.del = obj['delete'];\n\n  return obj;\n};\n\n/**\n * Expose `Test`\n */\n\nmodule.exports.Test = Test;\n\n/**\n * Expose the agent function\n */\n\nmodule.exports.agent = require('./lib/agent');\n","/home/travis/build/npmtest/node-npmtest-supertest/node_modules/supertest/lib/test.js":"/**\n * Module dependencies.\n */\n\nvar request = require('superagent');\nvar util = require('util');\nvar http = require('http');\nvar https = require('https');\nvar assert = require('assert');\nvar Request = request.Request;\n\n/**\n * Expose `Test`.\n */\n\nmodule.exports = Test;\n\n/**\n * Initialize a new `Test` with the given `app`,\n * request `method` and `path`.\n *\n * @param {Server} app\n * @param {String} method\n * @param {String} path\n * @api public\n */\n\nfunction Test(app, method, path) {\n  Request.call(this, method.toUpperCase(), path);\n  this.redirects(0);\n  this.buffer();\n  this.app = app;\n  this._asserts = [];\n  this.url = typeof app === 'string'\n    ? app + path\n    : this.serverAddress(app, path);\n}\n\n/**\n * Inherits from `Request.prototype`.\n */\n\nTest.prototype.__proto__ = Request.prototype;\n\n/**\n * Returns a URL, extracted from a server.\n *\n * @param {Server} app\n * @param {String} path\n * @returns {String} URL address\n * @api private\n */\n\nTest.prototype.serverAddress = function(app, path) {\n  var addr = app.address();\n  var port;\n  var protocol;\n\n  if (!addr) this._server = app.listen(0);\n  port = app.address().port;\n  protocol = app instanceof https.Server ? 'https' : 'http';\n  return protocol + '://127.0.0.1:' + port + path;\n};\n\n/**\n * Expectations:\n *\n *   .expect(200)\n *   .expect(200, fn)\n *   .expect(200, body)\n *   .expect('Some body')\n *   .expect('Some body', fn)\n *   .expect('Content-Type', 'application/json')\n *   .expect('Content-Type', 'application/json', fn)\n *   .expect(fn)\n *\n * @return {Test}\n * @api public\n */\n\nTest.prototype.expect = function(a, b, c) {\n  // callback\n  if (typeof a === 'function') {\n    this._asserts.push(a);\n    return this;\n  }\n  if (typeof b === 'function') this.end(b);\n  if (typeof c === 'function') this.end(c);\n\n  // status\n  if (typeof a === 'number') {\n    this._asserts.push(this._assertStatus.bind(this, a));\n    // body\n    if (typeof b !== 'function' && arguments.length > 1) {\n      this._asserts.push(this._assertBody.bind(this, b));\n    }\n    return this;\n  }\n\n  // header field\n  if (typeof b === 'string' || typeof b === 'number' || b instanceof RegExp) {\n    this._asserts.push(this._assertHeader.bind(this, { name: '' + a, value: b }));\n    return this;\n  }\n\n  // body\n  this._asserts.push(this._assertBody.bind(this, a));\n\n  return this;\n};\n\n/**\n * Defer invoking superagent's `.end()` until\n * the server is listening.\n *\n * @param {Function} fn\n * @api public\n */\n\nTest.prototype.end = function(fn) {\n  var self = this;\n  var server = this._server;\n  var end = Request.prototype.end;\n\n  end.call(this, function(err, res) {\n    if (server && server._handle) return server.close(assert);\n\n    assert();\n\n    function assert() {\n      self.assert(err, res, fn);\n    }\n  });\n\n  return this;\n};\n\n/**\n * Perform assertions and invoke `fn(err, res)`.\n *\n * @param {?Error} resError\n * @param {Response} res\n * @param {Function} fn\n * @api private\n */\n\nTest.prototype.assert = function(resError, res, fn) {\n  var error;\n  var i;\n\n  // check for unexpected network errors or server not running/reachable errors\n  // when there is no response and superagent sends back a System Error\n  // do not check further for other asserts, if any, in such case\n  // https://nodejs.org/api/errors.html#errors_common_system_errors\n  var sysErrors = {\n    ECONNREFUSED: 'Connection refused',\n    ECONNRESET: 'Connection reset by peer',\n    EPIPE: 'Broken pipe',\n    ETIMEDOUT: 'Operation timed out'\n  };\n\n  if (!res && resError && (resError instanceof Error) && (resError.syscall === 'connect')\n      && (Object.getOwnPropertyNames(sysErrors).indexOf(resError.code) >= 0)) {\n    error = new Error(resError.code + ': ' + sysErrors[resError.code]);\n    fn.call(this, error, null);\n    return;\n  }\n\n  // asserts\n  for (i = 0; i < this._asserts.length && !error; i += 1) {\n    error = this._assertFunction(this._asserts[i], res);\n  }\n\n  // set unexpected superagent error if no other error has occurred.\n  if (!error && resError instanceof Error && (!res || resError.status !== res.status)) {\n    error = resError;\n  }\n\n  fn.call(this, error || null, res);\n};\n\n/**\n * Perform assertions on a response body and return an Error upon failure.\n *\n * @param {Mixed} body\n * @param {Response} res\n * @return {?Error}\n * @api private\n */\n\nTest.prototype._assertBody = function(body, res) {\n  var isregexp = body instanceof RegExp;\n  var a;\n  var b;\n\n  // parsed\n  if (typeof body === 'object' && !isregexp) {\n    try {\n      assert.deepEqual(body, res.body);\n    } catch (err) {\n      a = util.inspect(body);\n      b = util.inspect(res.body);\n      return error('expected ' + a + ' response body, got ' + b, body, res.body);\n    }\n  } else if (body !== res.text) {\n    // string\n    a = util.inspect(body);\n    b = util.inspect(res.text);\n\n    // regexp\n    if (isregexp) {\n      if (!body.test(res.text)) {\n        return error('expected body ' + b + ' to match ' + body, body, res.body);\n      }\n    } else {\n      return error('expected ' + a + ' response body, got ' + b, body, res.body);\n    }\n  }\n};\n\n/**\n * Perform assertions on a response header and return an Error upon failure.\n *\n * @param {Object} header\n * @param {Response} res\n * @return {?Error}\n * @api private\n */\n\nTest.prototype._assertHeader = function(header, res) {\n  var field = header.name;\n  var actual = res.header[field.toLowerCase()];\n  var fieldExpected = header.value;\n\n  if (typeof actual === 'undefined') return new Error('expected \"' + field + '\" header field');\n  // This check handles header values that may be a String or single element Array\n  if ((actual instanceof Array && actual.toString() === fieldExpected) ||\n    fieldExpected === actual) {\n    return;\n  }\n  if (fieldExpected instanceof RegExp) {\n    if (!fieldExpected.test(actual)) {\n      return new Error('expected \"' + field + '\" matching ' +\n        fieldExpected + ', got \"' + actual + '\"');\n    }\n  } else {\n    return new Error('expected \"' + field + '\" of \"' + fieldExpected + '\", got \"' + actual + '\"');\n  }\n};\n\n/**\n * Perform assertions on the response status and return an Error upon failure.\n *\n * @param {Number} status\n * @param {Response} res\n * @return {?Error}\n * @api private\n */\n\nTest.prototype._assertStatus = function(status, res) {\n  var a;\n  var b;\n  if (res.status !== status) {\n    a = http.STATUS_CODES[status];\n    b = http.STATUS_CODES[res.status];\n    return new Error('expected ' + status + ' \"' + a + '\", got ' + res.status + ' \"' + b + '\"');\n  }\n};\n\n/**\n * Performs an assertion by calling a function and return an Error upon failure.\n *\n * @param {Function} fn\n * @param {Response} res\n * @return {?Error}\n * @api private\n */\nTest.prototype._assertFunction = function(check, res) {\n  var err;\n  try {\n    err = check(res);\n  } catch (e) {\n    err = e;\n  }\n  if (err instanceof Error) return err;\n};\n\n/**\n * Return an `Error` with `msg` and results properties.\n *\n * @param {String} msg\n * @param {Mixed} expected\n * @param {Mixed} actual\n * @return {Error}\n * @api private\n */\n\nfunction error(msg, expected, actual) {\n  var err = new Error(msg);\n  err.expected = expected;\n  err.actual = actual;\n  err.showDiff = true;\n  return err;\n}\n","/home/travis/build/npmtest/node-npmtest-supertest/node_modules/supertest/lib/agent.js":"\n/**\n * Module dependencies.\n */\n\nvar Agent = require('superagent').agent;\nvar methods = require('methods');\nvar http = require('http');\nvar Test = require('./test');\n\n/**\n * Expose `Agent`.\n */\n\nmodule.exports = TestAgent;\n\n/**\n * Initialize a new `TestAgent`.\n *\n * @param {Function|Server} app\n * @param {Object} options\n * @api public\n */\n\nfunction TestAgent(app, options) {\n  if (!(this instanceof TestAgent)) return new TestAgent(app, options);\n  if (typeof app === 'function') app = http.createServer(app);  // eslint-disable-line no-param-reassign\n  if (options) {\n    this._ca = options.ca;\n    this._key = options.key;\n    this._cert = options.cert;\n  }\n  Agent.call(this);\n  this.app = app;\n}\n\n/**\n * Inherits from `Agent.prototype`.\n */\n\nTestAgent.prototype.__proto__ = Agent.prototype;\n\n// override HTTP verb methods\nmethods.forEach(function(method) {\n  TestAgent.prototype[method] = function(url, fn) {   // eslint-disable-line no-unused-vars\n    var req = new Test(this.app, method.toUpperCase(), url);\n    req.ca(this._ca);\n    req.cert(this._cert);\n    req.key(this._key);\n\n    req.on('response', this._saveCookies.bind(this));\n    req.on('redirect', this._saveCookies.bind(this));\n    req.on('redirect', this._attachCookies.bind(this, req));\n    this._attachCookies(req);\n\n    return req;\n  };\n});\n\nTestAgent.prototype.del = TestAgent.prototype.delete;\n"}